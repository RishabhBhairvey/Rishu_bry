(function(w) {

    var requestAnimFrame = (function(){
        return  window.requestAnimationFrame       || 
                window.webkitRequestAnimationFrame || 
                window.mozRequestAnimationFrame    || 
                window.oRequestAnimationFrame      || 
                window.msRequestAnimationFrame     || 
                function(/* function */ callback, /* DOMElement */ element){
                    window.setTimeout(callback, 1000 / 60);
                };
    })();

    function objExtend(obj1,obj2) {
        for (var key in obj2) {
            obj1[key] = obj2[key];
        }
        return obj1;
    }    

    var easing = {
        // no easing, no acceleration
        linear: function (t) { return t },
        // accelerating from zero velocity
        inquad: function (t) { return t*t },
        // decelerating to zero velocity
        outquad: function (t) { return t*(2-t) },
        // acceleration until halfway, then deceleration
        inoutquad: function (t) { return t<.5 ? 2*t*t : -1+(4-2*t)*t },
        // accelerating from zero velocity 
        incubic: function (t) { return t*t*t },
        // decelerating to zero velocity 
        outcubic: function (t) { return (--t)*t*t+1 },
        // acceleration until halfway, then deceleration 
        inoutcubic: function (t) { return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1 },
        // accelerating from zero velocity 
        inquart: function (t) { return t*t*t*t },
        // decelerating to zero velocity 
        outquart: function (t) { return 1-(--t)*t*t*t },
        // acceleration until halfway, then deceleration
        inoutquart: function (t) { return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t },
        // accelerating from zero velocity
        inquint: function (t) { return t*t*t*t*t },
        // decelerating to zero velocity
        outquint: function (t) { return 1+(--t)*t*t*t*t },
        // acceleration until halfway, then deceleration 
        inoutquint: function (t) { return t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t },
        // elastic bounce effect at the end
        outelastic: function (t) { return (.04 - .04 / t) * Math.sin(25 * t) + 1 },
        // bounce effect at the end
        outbounce: function (t) { return (.04 - .04 / t) * Math.abs(Math.sin(25 * t)) + 1 },
        //
        insin: function (t) { return 1 + Math.sin(Math.PI / 2 * t - Math.PI / 2); },
        //
        outsin: function (t) { return Math.sin(Math.PI / 2 * t); },
        //
        inoutsin: function (t) { return (1 + Math.sin(Math.PI * t - Math.PI / 2)) / 2;},


        outinertia: function (t) { var t2 =(--t)*t*t+1; return t2 + Math.cos(-1.5708 + 1.5708 * t2 *2)   },
    }

    w.Tween = function(params){
        if(params.duration == null || params.duration < 0) params.duration = 300;
        if(params.onUpdate == null) params.onUpdate = undefined;
        if(params.onComplete == null) params.onComplete = undefined;
        if(typeof params.easing == "undefined" || typeof easing[params.easing.toLowerCase()] == "undefined") {
            /*console.warn("Easing type '"+params.easing+"' not found! set as linear ...");
            console.info("Easing type available:\n"+
                "linear  inQuad  outQuad  inOutQuad  inCubic  outCubic  inOutCubic  inQuart  outQuart " +
                "inOutQuart  inQuint  outQuint  inOutQuint  outElastic  outBounce  inSin  outSin  inOutSin"
            );*/
            params.easing = "inoutquad";
        }

        var twObj = this;
        
        twObj.params = {
            target: null,
            vars: {},
            duration: 0,
            onUpdate: function(){},
            onComplete: function(){},
            easing: "linear"
        }

        objExtend(twObj.params,params);

        var target = twObj.params.target;

        twObj.startTweenvars = [];
        twObj.deltaTweenvars = [];
        
        twObj.startTime = Date.now();
        twObj.ep = 0;
        twObj.progress = 0;

        Object.keys(twObj.params.vars).forEach(function(key,index){
            if(typeof target[key] == "undefined") target[key] = 0;
            target[key] = parseFloat(target[key],10);
            twObj.startTweenvars.push(target[key]);
            twObj.deltaTweenvars.push(twObj.params.vars[key] - target[key]);
        });

        twObj.stop = function(){
            try {
                if(typeof twObj !== "undefined") delete twObj;
                twObj = undefined;
            } catch(e) {
                
            }
        }

        function tweenUpdate(){
            if(typeof twObj !== "undefined") {
                twObj.progress = (Date.now() - twObj.startTime)/twObj.params.duration;
                if(twObj.progress > 1) twObj.progress = 1;
                twObj.easingProgress = easing[twObj.params.easing.toLowerCase()](twObj.progress);

                Object.keys(twObj.params.vars).forEach(function(key,index){
                    /* NOTE! using Object.keys(obj).forEach style is much faster than for in loop */
                    if(!isNaN(target[key])) {
                        target[key] = twObj.startTweenvars[index] + twObj.deltaTweenvars[index] * twObj.easingProgress;
                    }
                });
                
                if(typeof twObj.params.onUpdate !== "undefined") twObj.params.onUpdate.apply(twObj);

                if(twObj.progress == 1) { 
                    if(typeof twObj.params.onComplete !== "undefined") twObj.params.onComplete.apply(twObj);
                    if(typeof twObj !== "undefined") twObj.stop(); 
                } else requestAnimFrame(tweenUpdate);
            }
        }

        requestAnimFrame(tweenUpdate);
    }

    w.tween = function(){

        var params = (arguments.length > 1) ? {
            target: arguments[0],
            vars: arguments[1],
            duration: arguments[2],
            easing: arguments[3],
            onUpdate: arguments[4],
            onComplete: arguments[5],
        } : arguments[0];

        return new Tween(params);
    }
    
    // body...
})(window);        